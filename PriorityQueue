import tkinter as tk
from tkinter import messagebox

class PriorityQueue:
    def __init__(self):
        self.queue = []

    def insert(self, item, priority):
        self.queue.append((item, priority))
        self.queue.sort(key=lambda x: x[1])  # Sort by priority

    def delete(self):
        if not self.is_empty():
            return self.queue.pop(0)[0]
        else:
            return None

    def traverse(self):
        return self.queue

    def is_empty(self):
        return len(self.queue) == 0

class PriorityQueueGUI:
    def __init__(self, root):
        self.queue = PriorityQueue()
        self.root = root
        self.root.title("Priority Queue GUI")

        self.root.configure(bg="white")
        self.main_frame = tk.Frame(root, bg="lightblue")
        self.main_frame.pack(pady=10)

        self.title_label = tk.Label(self.main_frame, text="Priority Queue Operations", bg="#f0f0f0", font=("Arial", 16, "bold"))
        self.title_label.grid(row=0, column=0, columnspan=3, pady=10)

        self.input_label = tk.Label(self.main_frame, text="Enter element to insert:", bg="#f0f0f0", font=("Arial", 12))
        self.input_label.grid(row=1, column=0, padx=5, pady=5)
        self.input_entry = tk.Entry(self.main_frame, font=("Arial", 12))
        self.input_entry.grid(row=1, column=1, padx=5, pady=5)

        self.priority_label = tk.Label(self.main_frame, text="Enter priority:", bg="#f0f0f0", font=("Arial", 12))
        self.priority_label.grid(row=2, column=0, padx=5, pady=5)
        self.priority_entry = tk.Entry(self.main_frame, font=("Arial", 12))
        self.priority_entry.grid(row=2, column=1, padx=5, pady=5)

        self.insert_button = tk.Button(self.main_frame, text="Insert", command=self.insert, bg="#4caf50", fg="white", font=("Arial", 12))
        self.insert_button.grid(row=3, column=0, padx=5, pady=5)

        self.delete_button = tk.Button(self.main_frame, text="Delete", command=self.delete, bg="#f44336", fg="white", font=("Arial", 12))
        self.delete_button.grid(row=3, column=1, padx=5, pady=5)

        self.traverse_button = tk.Button(self.main_frame, text="Traverse", command=self.traverse, bg="#2196f3", fg="white", font=("Arial", 12))
        self.traverse_button.grid(row=3, column=2, padx=5, pady=5)

        self.is_empty_button = tk.Button(self.main_frame, text="Is Empty", command=self.is_empty, bg="#ff9800", fg="white", font=("Arial", 12))
        self.is_empty_button.grid(row=3, column=3, padx=5, pady=5)

        self.exit_button = tk.Button(self.main_frame, text="Exit", command=root.quit, bg="#607d8b", fg="white", font=("Arial", 12))
        self.exit_button.grid(row=4, column=1, padx=5, pady=5)

        self.result_title_label = tk.Label(self.main_frame, text="Output", bg="#f0f0f0", font=("Arial", 14, "bold"))
        self.result_title_label.grid(row=5, column=0, columnspan=3, pady=10)

        self.result_label = tk.Label(self.main_frame, text="", bg="#f0f0f0", font=("Arial", 12))
        self.result_label.grid(row=6, column=0, columnspan=3, padx=5, pady=5)

    def insert(self):
        item = self.input_entry.get()
        priority = self.priority_entry.get()
        if item and priority.isdigit():
            self.queue.insert(item, int(priority))
            self.result_label.config(text=f"Inserted item: {item} with priority: {priority}", fg="#4caf50")
        else:
            messagebox.showerror("Invalid input", "Please enter a valid item and priority")
        self.input_entry.delete(0, tk.END)
        self.priority_entry.delete(0, tk.END)

    def delete(self):
        item = self.queue.delete()
        if item is not None:
            self.result_label.config(text=f"Deleted item: {item}", fg="#f44336")
        else:
            self.result_label.config(text="Queue is empty", fg="#f44336")

    def traverse(self):
        queue = self.queue.traverse()
        self.result_label.config(text=f"Queue: {queue}", fg="#2196f3")

    def is_empty(self):
        if self.queue.is_empty():
            self.result_label.config(text="Queue is empty", fg="#ff9800")
        else:
            self.result_label.config(text="Queue is not empty", fg="#ff9800")

if __name__ == "__main__":
    root = tk.Tk()
    app = PriorityQueueGUI(root)
    root.mainloop()
 

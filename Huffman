import heapq
from collections import Counter
import json
import tkinter as tk
from tkinter import filedialog, messagebox
from tkinter import font as tkFont
from tkinter import ttk, scrolledtext
import graphviz
from PIL import Image, ImageTk

# Huffman Coding Logic Class
class HuffmanCoding:
    class Node:
        def __init__(self, char=None, freq=None):
            self.char = char
            self.freq = freq
            self.left = None
            self.right = None

        def __lt__(self, other):
            return self.freq < other.freq

    def __init__(self):
        self.root = None

    def build_huffman_tree(self, frequencies):
        heap = [HuffmanCoding.Node(char, freq) for char, freq in frequencies.items()]
        heapq.heapify(heap)

        while len(heap) > 1:
            left = heapq.heappop(heap)
            right = heapq.heappop(heap)
            merged = HuffmanCoding.Node(freq=left.freq + right.freq)
            merged.left = left
            merged.right = right
            heapq.heappush(heap, merged)

        self.root = heap[0]

    def generate_codes(self, node, prefix="", codebook=None):
        if codebook is None:
            codebook = {}

        if node:
            if node.char is not None:
                codebook[node.char] = prefix
            self.generate_codes(node.left, prefix + "0", codebook)
            self.generate_codes(node.right, prefix + "1", codebook)

        return codebook

    def huffman_encoding(self, data):
        if not data:
            return ""

        frequencies = Counter(data)
        self.build_huffman_tree(frequencies)
        codebook = self.generate_codes(self.root)
        encoded_data = ''.join(codebook[char] for char in data)

        combined_data = json.dumps({"encoded_data": encoded_data, "codebook": codebook})
        self.visualize_huffman_tree()

        return combined_data

    def huffman_decoding(self, combined_data):
        data = json.loads(combined_data)
        encoded_data = data["encoded_data"]
        codebook = data["codebook"]

        reverse_codebook = {v: k for k, v in codebook.items()}
        decoded_data = ""
        current_code = ""

        for bit in encoded_data:
            current_code += bit
            if current_code in reverse_codebook:
                decoded_data += reverse_codebook[current_code]
                current_code = ""

        return decoded_data

    def visualize_huffman_tree(self):
        def add_edges(graph, node, parent=None, edge_label=""):
            if node:
                node_label = f"{node.char}:{node.freq}" if node.char else f"{node.freq}"
                graph.node(str(id(node)), node_label)

                if parent:
                    graph.edge(str(id(parent)), str(id(node)), label=edge_label)

                add_edges(graph, node.left, node, "0")
                add_edges(graph, node.right, node, "1")

        graph = graphviz.Digraph(format='png')
        add_edges(graph, self.root)

        # Save and render the graph
        graph_path = 'huffman_tree'
        graph.render(graph_path)

        # Display the image in a separate Tkinter window
        HuffmanCodingGUI.display_tree_image(graph_path + '.png')

# GUI Class
class HuffmanCodingGUI:
    def __init__(self, root):
        self.huffman_coding = HuffmanCoding()

        # Set window properties
        self.root = root
        self.root.title("Huffman Coding")

        window_width = 600
        window_height = 400
        screen_width = root.winfo_screenwidth()
        screen_height = root.winfo_screenheight()
        position_top = int(screen_height / 2 - window_height / 2)
        position_right = int(screen_width / 2 - window_width / 2)
        root.geometry(f"{window_width}x{window_height}+{position_right}+{position_top}")

        # Configure font and styles
        self.title_font = tkFont.Font(family="Helvetica", size=18, weight="bold")
        self.button_font = tkFont.Font(family="Helvetica", size=12)

        # Create widgets
        self.create_widgets()

    def create_widgets(self):
        # Title label
        title_label = tk.Label(self.root, text="Huffman Coding", font=self.title_font, fg="blue")
        title_label.pack(pady=10)

        # Encode button
        encode_button = ttk.Button(self.root, text="Encode File", command=self.encode_file)
        encode_button.pack(pady=5)
        encode_button.configure(width=20)

        # Decode button
        decode_button = ttk.Button(self.root, text="Decode File", command=self.decode_file)
        decode_button.pack(pady=5)
        decode_button.configure(width=20)

        # Exit button
        exit_button = ttk.Button(self.root, text="Exit", command=self.root.quit)
        exit_button.pack(pady=5)
        exit_button.configure(width=20)

        # Scrolled text widget for displaying encoded/decoded data
        self.output_text = scrolledtext.ScrolledText(self.root, wrap=tk.WORD, width=70, height=10, font=self.button_font)
        self.output_text.pack(pady=10)

        # Footer label
        footer_label = tk.Label(self.root, text="Name: Jency Nadar   Roll No: S094", font=("Helvetica", 10))
        footer_label.pack(side=tk.BOTTOM, anchor=tk.E, padx=10, pady=5)

    def encode_file(self):
        file_path = filedialog.askopenfilename(title="Select file to encode")
        if file_path:
            try:
                with open(file_path, 'r') as file:
                    data = file.read()
                combined_data = self.huffman_coding.huffman_encoding(data)

                encoded_file_path = file_path + ".huff"
                with open(encoded_file_path, 'w') as encoded_file:
                    encoded_file.write(combined_data)

                # Display the encoded data
                self.output_text.delete('1.0', tk.END)
                self.output_text.insert(tk.END, "Encoded Data:\n" + json.loads(combined_data)["encoded_data"])

                messagebox.showinfo("Success", f"Encoded Data saved to: {encoded_file_path}")
            except FileNotFoundError:
                messagebox.showerror("Error", "File not found. Please try again.")

    def decode_file(self):
        encoded_file_path = filedialog.askopenfilename(title="Select encoded file")
        if encoded_file_path:
            try:
                with open(encoded_file_path, 'r') as encoded_file:
                    combined_data = encoded_file.read()

                decoded_data = self.huffman_coding.huffman_decoding(combined_data)

                decoded_file_path = encoded_file_path + ".decoded.txt"
                with open(decoded_file_path, 'w') as decoded_file:
                    decoded_file.write(decoded_data)

                # Display the decoded data
                self.output_text.delete('1.0', tk.END)
                self.output_text.insert(tk.END, "Decoded Data:\n" + decoded_data)

                messagebox.showinfo("Success", f"Decoded Data saved to: {decoded_file_path}")
            except FileNotFoundError:
                messagebox.showerror("Error", "File not found. Please try again.")
            except json.JSONDecodeError:
                messagebox.showerror("Error", "Invalid data format. Please try again.")

    @staticmethod
    def display_tree_image(image_path):
        tree_window = tk.Toplevel()
        tree_window.title("Huffman Tree")

        img = Image.open(image_path)
        img = ImageTk.PhotoImage(img)

        img_label = tk.Label(tree_window, image=img)
        img_label.image = img  # Keep a reference to avoid garbage collection
        img_label.pack()

# Main function to create the GUI
if __name__ == "__main__":
    root = tk.Tk()
    app = HuffmanCodingGUI(root)
    root.mainloop()

import tkinter as tk
from tkinter import messagebox

class HashTable:
    def __init__(self, size=10):
        self.size = size
        self.table = [None] * size  # Initialize the hash table with empty slots

    def _hash(self, key):
        """Simple hash function based on the key's value."""
        return hash(key) % self.size

    def _ascii_value(self, key):
        """Convert the key into its ASCII values."""
        return [ord(char) for char in key]

    def add(self, key):
        """Add a key-value pair into the hash table. The value is derived from the key itself."""
        index = self._hash(key)
        value = f"{key}"  # Automatically assigning a value based on the key
        ascii_values = self._ascii_value(key)  # Get ASCII values of the key
        
        if self.table[index] is None:
            self.table[index] = (key, value)
            return f"Added key '{key}' with ASCII {ascii_values} at index {index}"
        else:
            return f"Index {index} already occupied by key '{self.table[index][0]}'"

    def remove(self, key):
        """Remove a key-value pair from the hash table."""
        index = self._hash(key)
        
        if self.table[index] is not None and self.table[index][0] == key:
            self.table[index] = None  # Remove the key-value pair
            return f"Removed key '{key}' from index {index}"
        else:
            return f"Key '{key}' not found in the hash table"

    def search(self, key):
        """Search for a value by its key in the hash table."""
        index = self._hash(key)
        
        if self.table[index] is not None and self.table[index][0] == key:
            return f"Key '{key}' found at index {index} with value '{self.table[index][1]}'"
        else:
            return f"Key '{key}' not found in the hash table"

    def traverse(self):
        """Traverse and display all key-value pairs in the hash table with their ASCII values."""
        result = "Hash Table contents:\n"
        for i, item in enumerate(self.table):
            if item is not None:
                ascii_values = self._ascii_value(item[0])  # Get ASCII values of the key
                result += f"Index {i}: Key = '{item[0]}', ASCII = {ascii_values}\n"
            else:
                result += f"Index {i}: Empty\n"
        return result


# GUI for the Hash Table
class HashTableGUI:
    def __init__(self, root):
        self.hash_table = HashTable(size=10)

        self.root = root
        self.root.title("Hash Table GUI")
        self.root.geometry("600x500")

        # Header
        self.header_label = tk.Label(root, text="Hash Table Operations", font=("Arial", 16, "bold"), bg="lightblue", pady=10)
        self.header_label.pack(fill="x")

        # Input field for key
        self.key_label = tk.Label(root, text="Enter Key:", font=("Arial", 12))
        self.key_label.pack()

        self.key_entry = tk.Entry(root, font=("Arial", 12))
        self.key_entry.pack()

        # Buttons for operations
        self.add_button = tk.Button(root, text="Add", command=self.add_key, font=("Arial", 12))
        self.add_button.pack(pady=5)

        self.remove_button = tk.Button(root, text="Remove", command=self.remove_key, font=("Arial", 12))
        self.remove_button.pack(pady=5)

        self.search_button = tk.Button(root, text="Search", command=self.search_key, font=("Arial", 12))
        self.search_button.pack(pady=5)

        # Frame to hold text areas for output
        self.frame = tk.Frame(root)
        self.frame.pack(pady=10)

        # Text area for add, remove, search output
        self.output_area = tk.Text(self.frame, height=15, width=35, font=("Arial", 12))
        self.output_area.pack(side="left", padx=5)

        # Text area for traverse output
        self.traverse_area = tk.Text(self.frame, height=15, width=35, font=("Arial", 12))
        self.traverse_area.pack(side="right", padx=5)

        # Footer
        self.footer_label = tk.Label(root, text="Jency Nadar S094", font=("Arial", 10), bg="lightblue", pady=10)
        self.footer_label.pack(fill="x", side="bottom")

    def display_message(self, message):
        """Append a message in the output area without clearing the previous output."""
        self.output_area.insert(tk.END, message + "\n")  # Insert the message at the end

    def update_traverse(self):
        """Update the traverse output area."""
        message = self.hash_table.traverse()
        self.traverse_area.delete('1.0', tk.END)  # Clear previous output before displaying the traverse result
        self.traverse_area.insert(tk.END, message)  # Insert the traverse message

    def add_key(self):
        key = self.key_entry.get()
        if key:
            message = self.hash_table.add(key)
            self.display_message(message)
            self.update_traverse()  # Update traverse area after adding
        else:
            messagebox.showerror("Input Error", "Please enter a valid key.")

    def remove_key(self):
        key = self.key_entry.get()
        if key:
            message = self.hash_table.remove(key)
            self.display_message(message)
            self.update_traverse()  # Update traverse area after removing
        else:
            messagebox.showerror("Input Error", "Please enter a valid key.")

    def search_key(self):
        key = self.key_entry.get()
        if key:
            message = self.hash_table.search(key)
            self.display_message(message)
        else:
            messagebox.showerror("Input Error", "Please enter a valid key.")

# Main loop to run the GUI application
if __name__ == "__main__":
    root = tk.Tk()
    app = HashTableGUI(root)
    root.mainloop()
